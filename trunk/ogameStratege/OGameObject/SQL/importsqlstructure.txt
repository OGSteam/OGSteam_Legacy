
CREATE TABLE T_EXTERNAL EXTERNAL 'C:\DOCUMENTS AND SETTINGS\ERIC\MES DOCUMENTS\VISUAL STUDIO PROJECTS\OGAMESTRATEGE\BIN\REMOTE_IMPORTED.DAT' (
    GAL           CHAR(1),
    SYS           CHAR(3),
    NUM           CHAR(3),
    MOON          CHAR(1),
    NAME          CHAR(25),
    OWNERNAME     CHAR(50),
    OWNERALLYTAG  CHAR(20),
    DATADATE      CHAR(19),
    DATASENDER    CHAR(30),
    RT            CHAR(2)
);

SET TERM ^ ;

CREATE PROCEDURE IMPORT_TRANSFERT 
RETURNS (
    PLAYERADDED INTEGER,
    PLANETADDED INTEGER,
    PLAYERUPDATED INTEGER,
    PLANETUPDATED INTEGER,
    COORDS CHAR(9),
    PLANETNAME CHAR(25),
    PLAYERNAME CHAR(50),
    ALLIANCETAG CHAR(20),
    STOREDDATE TIMESTAMP,
    UPDATEDDATE TIMESTAMP)
AS
DECLARE VARIABLE GAL INTEGER;
DECLARE VARIABLE SYS INTEGER;
DECLARE VARIABLE NUM INTEGER;
DECLARE VARIABLE MOON CHAR(1);
DECLARE VARIABLE NAME CHAR(25);
DECLARE VARIABLE OWNERNAME CHAR(50);
DECLARE VARIABLE OWNERALLYTAG CHAR(20);
DECLARE VARIABLE DATADATE CHAR(19);
DECLARE VARIABLE DATASENDER CHAR(30);
DECLARE VARIABLE PLANETID INTEGER;
DECLARE VARIABLE PLAYERID INTEGER;
DECLARE VARIABLE PREVDATADATE TIMESTAMP;
begin
    FOR SELECT gal,sys,num,moon,name,ownername,ownerallytag,datadate,datasender
        FROM T_EXTERNAL
        INTO :GAL,:SYS,:NUM,:MOON,:NAME,:OWNERNAME,:OWNERALLYTAG,:DATADATE,:DATASENDER
    DO BEGIN
        PLAYERID=null;
        PLANETID=null;
        playeradded='0' ;
        planetadded='0' ;
        playerupdated='0';
        planetupdated='0';
        playername=:ownername;
        alliancetag=:ownerallytag;
        planetname=:name;
        coords=:GAL || ':' || CAST(:sys as INTEGER) || ':' || CAST(:NUM as integer) ;
        /* Check and Select planet with given coords*/
        SELECT ID,DATADATE FROM PLANETS WHERE GALAXY=:GAL AND SYSTEM=:SYS AND PLANETNUM=:NUM
                INTO :PLANETID,:PREVDATADATE;
        /*  Check if data is newer than the submitted one*/
        UPDATEDDATE=:DATADATE;
        storeddate=:prevdatadate;
        if (:prevdatadate >:datadate ) then
        begin
            suspend;
        end
        /* Check and Select Player with given ownername */
        SELECT ID FROM PLAYERS WHERE NAME=:OWNERNAME
                INTO :PLAYERID;
        /* Insert if player doesnt exist */
        IF (:PLAYERID IS NULL) THEN
        BEGIN
                PLAYERID=GEN_ID(PLAYER_ID,1);
                INSERT INTO PLAYERS (ID,NAME,ALLIANCE,DATASENDER,DATADATE,MAINPLANETCOORDS)
                        VALUES (:PLAYERID,:OWNERNAME,:OWNERALLYTAG,:DATASENDER,:DATADATE,'');

                playeradded='1';

        /* Update player if it exist*/
        END ELSE BEGIN
                UPDATE  PLAYERS SET ALLIANCE=:OWNERALLYTAG
                WHERE (ID=:PLAYERID);
                playerupdated='1';
        END

        if (planetid is null) then
        begin

            planetid=GEN_ID("PLANETS_ID",1);
            insert into planets (ID,MOON,NAME,GALAXY,SYSTEM,PLANETNUM,PLAYERID,MOON,FIELDS,DATASENDER,DATADATE)
                VALUES (:planetid,cast(:moon as smallint), :name, :gal,:sys,:num, :playerid,'','',:DATASENDER,:DATADATE);
            planetadded='1'   ;
        end else

        begin
                 planetupdated='1';
                 UPDATE planets set NAME=:name, 
                                    PLAYERID=:playerid,
                                    MOON=cast(:MOON as smallint),
                                    DATASENDER=:DATASENDER,
                                    DATADATE=:datadate
                                WHERE (ID=:PLANETID);

        end
         suspend;

    END
END^

SET TERM ; ^

GRANT SELECT ON T_EXTERNAL TO PROCEDURE IMPORT_TRANSFERT;

GRANT SELECT,INSERT,UPDATE ON PLANETS TO PROCEDURE IMPORT_TRANSFERT;

GRANT SELECT,INSERT,UPDATE ON PLAYERS TO PROCEDURE IMPORT_TRANSFERT;

GRANT EXECUTE ON PROCEDURE IMPORT_TRANSFERT TO SYSDBA;